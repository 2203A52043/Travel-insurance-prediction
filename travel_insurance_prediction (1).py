# -*- coding: utf-8 -*-
"""Travel_Insurance_Prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1DA5eEekGoVwDZFOWkWLkARDZN1Iy7m8c
"""

import pandas as pd
a=pd.read_csv("/content/TravelInsurancePrediction.csv")
a

a['Employment Type'].value_counts()

a['Employment Type']=a['Employment Type'].replace({'Government Sector':0, 'Private Sector/Self Employed':1 })
a

a=a.replace({'Yes':1, 'No':1})
a

a=a.drop(columns=['Unnamed: 0'],axis=1)
a

"""**MINMAX SCALING**"""

from sklearn.preprocessing import MinMaxScaler
scaler = MinMaxScaler()
a_scaled = scaler.fit_transform(a)
a_scaled_df = pd.DataFrame(a_scaled, columns=a.columns)
a_scaled_df

features = a_scaled_df.drop(columns=['TravelInsurance'],axis=1)

from sklearn.model_selection import train_test_split
X_train,X_test,y_train,y_test = train_test_split(features, a_scaled_df['TravelInsurance'], test_size=0.2, random_state=42)

X_train

"""**LOGISTIC REGRESSION**"""

from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, confusion_matrix
model = LogisticRegression()
model.fit(X_train, y_train)
y_pred = model.predict(X_test)

accuracy = accuracy_score(y_test, y_pred)
print("Accuracy:", accuracy)

conf_matrix = confusion_matrix(y_test, y_pred)
print("Confusion Matrix:\n", conf_matrix)

"""**SUPPORT VECTOR MACHINE**"""

from sklearn.svm import SVC

model = SVC(kernel='linear', random_state=42)

model.fit(X_train, y_train)
y_pred = model.predict(X_test)

accuracy = accuracy_score(y_test, y_pred)
print("Accuracy:", accuracy)

conf_matrix = confusion_matrix(y_test, y_pred)
print("Confusion Matrix:\n", conf_matrix)

"""**Decision Tree**"""

from sklearn.tree import DecisionTreeClassifier

model = DecisionTreeClassifier(random_state=42,criterion='gini', max_depth=10, min_samples_split=2 ,min_samples_leaf= 1, max_features ='auto' )

model.fit(X_train, y_train)
y_pred = model.predict(X_test)

accuracy = accuracy_score(y_test, y_pred)
print("Accuracy:", accuracy)

conf_matrix = confusion_matrix(y_test, y_pred)
print("Confusion Matrix:\n", conf_matrix)

"""**Naive Bayes**

"""

from sklearn.naive_bayes import GaussianNB

model = GaussianNB()

model.fit(X_train, y_train)
y_pred = model.predict(X_test)

accuracy = accuracy_score(y_test, y_pred)
print("Accuracy:", accuracy)

conf_matrix = confusion_matrix(y_test, y_pred)
print("Confusion Matrix:\n", conf_matrix)

"""**multi-layer perceptrons**

"""

from sklearn.neural_network import MLPClassifier

model = MLPClassifier(random_state=42)

model.fit(X_train, y_train)
y_pred = model.predict(X_test)

accuracy = accuracy_score(y_test, y_pred)
print("Accuracy:", accuracy)

conf_matrix = confusion_matrix(y_test, y_pred)
print("Confusion Matrix:\n", conf_matrix)